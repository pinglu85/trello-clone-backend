scalar Date

type List {
  id: ID!
  boardId: Int!
  cards: [Card!]!
  closed: Boolean!
  name: String!
  rank: String!
}

type Query {
  lists(boardId: Int!): [List!]!
  list(id: ID!): List!
}

type MoveListResult {
  id: ID!
  boardId: Int!
  oldBoardId: Int!
  rank: String!
}

input ListUpdates {
  closed: Boolean
  name: String
}

type Mutation {
  createList(boardId: Int!, name: String!, rank: String!): List!
  moveList(id: ID!, newBoardId: Int!, newRank: String!): MoveListResult!
  updateList(id: ID!, updates: ListUpdates!): List!
}
